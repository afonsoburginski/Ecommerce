// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  price       Float
  images      String[]
  status      ProductStatus
  createdAt   DateTime      @default(now())
  orderItems  OrderItem[]
  variants    Variant[]
  categories  Category[]    @relation("CategoryToProduct")
  tags        Tag[]         @relation("ProductToTag")
}

model Variant {
  id        Int         @id @default(autoincrement())
  sku       String      @unique
  stock     Int
  size      String?
  color     String?
  productId Int
  OrderItem OrderItem[]
  product   Product     @relation(fields: [productId], references: [id])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] @relation("CategoryToProduct")
}


model User {
  id                Int        @id @default(autoincrement())
  email             String     @unique
  name              String
  orders            Order[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Order {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  status        OrderStatus    @default(PENDING)
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  transactionId String?
  orderItems    OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  productId Int
  orderId   Int
  variantId Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  variant   Variant @relation(fields: [variantId], references: [id])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  RECEIVED
  CANCELED
  FAILED
}

model Color {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  hexCode  String
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] @relation("ProductToTag")
}

model Gallery {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  caption   String?
  createdAt DateTime @default(now())
}

